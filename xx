#!/usr/bin/env bash

server_config=~/.server_config
expect_script_file=/tmp/xx.expect

print_color (){
    # Use colors, but only if connected to a terminal, and that terminal
    # supports them.
    if [ -x "$(command -v tput)" ]; then
      ncolors=$(tput colors)
    fi
    if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        BLUE="$(tput setaf 4)"
        BOLD="$(tput bold)"
        NORMAL="$(tput sgr0)"
    else
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        BOLD=""
        NORMAL=""
    fi

    tips="$1"
    color="$2"

    case "${color}" in
        "RED")
            printf "%s" "${RED}"
            echo -e "tips:\\n\\t${tips}"
            printf "%s" "${NORMAL}"
        ;;
        "GREEN")
            printf "%s" "${GREEN}"
            echo -e "tips:\\n\\t${tips}"
            printf "%s" "${NORMAL}"
        ;;
        "YELLOW")
            printf "%s" "${YELLOW}"
            echo -e "tips:\\n\\t${tips}"
            printf "%s" "${NORMAL}"
        ;;
        "BLUE")
            printf "%s" "${BLUE}"
            echo -e "tips:\\n\\t${tips}"
            printf "%s" "${NORMAL}"
        ;;
        "BOLD")
            printf "%s" "${BOLD}"
            echo -e "tips:\\n\\t${tips}"
            printf "%s" "${NORMAL}"
        ;;
        "HELP")
            printf "%s" "${RED}"
            echo '                      .__            '
            echo '___  _____ __  _____|  |__   ____    '
            echo '\  \/  /  |  \/  ___/  |  \_/ ___\   '
            echo ' >    <|  |  /\___ \|   Y  \  \___   '
            echo '/__/\_ \____//____  >___|  /\___  >  '
            echo '      \/          \/     \/     \/   '
            printf "%s" "${NORMAL}"

            echo

            printf "%s" "${GREEN}"
            echo -e "${tips}"
            printf "%s" "${NORMAL}"
        ;;
        *)
            echo -e "${tips}"
        ;;
    esac
}

xx_help (){

    read -rd '' tips <<EOF
server list:

$(awk 'BEGIN { print "Tag    Ip    Port   Name    Password"; print ""} { print $1 "\t" $2 "\t" $3 "\t" $4 "\t" $5; print "" } END { print "useage: xx server_tag"; print "" }' ${server_config})
EOF

    print_color "${tips}" "HELP";

    echo;
}

check_config (){
    #check config file
    if [ ! -f ${server_config} ]; then
        xx_help
        tips="error: server_config not exits!";
        print_color "${tips}" "YELLOW";
        exit;
    fi
}

check_input (){
    #expect a server name
    server_name="$1";

    cnt=$(grep -c "^${server_name}" ${server_config});

    if [ "${cnt}" -gt 1 ]; then
        xx_help
        tips="multiple servers detected, please make it more clear.";
        print_color "${tips}" "YELLOW";
        exit
    elif [ "${cnt}" -eq 0 ]; then
        xx_help
        tips="none server detected, please check your server names.";
        print_color "${tips}" "YELLOW";
        exit
    fi
}

main(){
    # Only enable exit-on-error after the non-critical colorization stuff,
    # which may fail on systems lacking tput or terminfo
    #set -e
    #set -x

    #check the config file
    check_config

    #check input
    check_input "$1"

    #split ssh params
    eval "$(grep "^${server_name}" ${server_config} |awk '{ printf("ip=%s;port=%s;username=%s;password=%s;", $2,$3,$4,$5) }')"

    #expect logic
    cat >${expect_script_file}<<EOF

trap {
 set rows [stty rows]
 set cols [stty columns]
 stty rows \$rows columns \$cols < \$spawn_out(slave,name)
} WINCH

spawn ssh -p ${port} ${username}@${ip}
expect {
        "*assword" {
            set timeout 10;
            send "${password}\n";
            exp_continue;
        }
        "*passphrase" {
            set timeout 10;
            send "${password}\r\n";
            exp_continue;
         }
        "yes/no" {
            send "yes\n";
            exp_continue;
         }
        "Last*" {
            send_user "\nlogin success on:【${server_name} ${ip}】 enjoy!\n";
         }
}
interact

EOF

    #cat ${expect_script_file} # Uncomment for debug
    expect -f ${expect_script_file} # run expect script
    rm ${expect_script_file} # remove expect script
}

if [ 1 != $# ]; then
    xx_help
else
    main "$1"
fi